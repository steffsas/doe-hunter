version: '3'

services:
  ## UIs AND MEASUREMENTs
  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
      - DYNAMIC_CONFIG_ENABLED=true
    depends_on:
      - kafka
    networks:
      - network

  # grafana:
  #   image: grafana/grafana
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     GF_PATHS_DATA: /var/lib/grafana
  #     GF_SECURITY_ADMIN_PASSWORD: kafka
  #   volumes:
  #     - ./grafana/provisioning:/etc/grafana/provisioning
  #     - ./grafana/dashboards:/var/lib/grafana/dashboards
  #   container_name: grafana
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - network

  # prometheus:
  #   image: prom/prometheus
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./config/prometheus/config.yml:/etc/prometheus/prometheus.yml
  #   command: "--config.file=/etc/prometheus/prometheus.yml"
  #   container_name: prometheus
  #   networks:
  #     - network

  # jmx-kafka:
  #   image: "sscaling/jmx-prometheus-exporter"
  #   restart: always
  #   ports:
  #     - "5556:5556"
  #   environment:
  #     CONFIG_YML: "/etc/jmx_exporter/config.yml"
  #   volumes:
  #     - ./config/jmx_exporter/config.yml:/etc/jmx_exporter/config.yml
  #   container_name: jmx-kafka
  #   depends_on:
  #     - kafka
  #   networks:
  #     - network

  ## ACTUAL SERVICES
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9991:9991 # JMX
      - 9092:9092 # Kafka
      - 29092:29092 # Kafka Host
      - 29094:29094 # Kafka Host
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,LOCALHOST://localhost:29092,NETWORK_HOST://10.224.189.65:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,LOCALHOST:PLAINTEXT,NETWORK_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFESTS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      # offsets.topic.replication.factor
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # transaction.state.log.replication.factor
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: "100"
      KAFKA_LOG_CLEANUP_POLICY: delete
      KAFKA_LOG_RETENTION_MS: "172800000"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - network

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongo_data:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:${MONGO_ROOT_PASSWORD}@mongo:27017/
      ME_CONFIG_BASICAUTH: false

  # postgresql:
  #   image: postgres
  #   volumes:
  #     - postgresql_data:/var/lib/postgresql/data
  #   networks:
  #     - network

  # ddr-scanner:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile
  #   depends_on:
  #     - kafka
  #   networks:
  #     - network

networks:
  network:

volumes:
  mongo_data:
  # postgresql_data:
